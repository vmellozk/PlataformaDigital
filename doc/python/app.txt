O arquivo app.py define a aplicação web usando o framework Flask. Ele gerencia as rotas e as interações com o
usuário, como o registro, login, e envio de formulários. Além disso, lida com a criação de eBooks em segundo
plano e mantém o controle de sessão dos usuários.

Relação com Outros Arquivos
HTML: O arquivo renderiza vários templates HTML (home.html, loja.html, perfil_visita.html, perfil.html, premium.html,
vendas.html, register.html, login.html).
CSS: Embora o CSS não esteja diretamente referenciado aqui, ele é presumido para estilizar as páginas HTML
renderizadas.
Database: Interage com o módulo database para inicializar o banco de dados e models para inserir e recuperar dados
do usuário e respostas de formulários.
Generate_Ebook: Utiliza a função generate_ebook do módulo generate_Ebook para criar eBooks em segundo plano.

Estrutura do Código e Organização
Organização Interna
O código está organizado em funções de rota que correspondem a diferentes endpoints da aplicação. As rotas são
seguidas por funções auxiliares e manipulação de formulários. As funções de manipulação de eventos estão situadas
logo após a definição das rotas.

Blocos de Código e Funções
home()
Descrição: Renderiza a página inicial.
Retorno: Renderiza o template home.html.
Interação com Outros Blocos: Chamado pela rota / e /home.

loja()
Descrição: Renderiza a página da loja.
Retorno: Renderiza o template loja.html.
Interação com Outros Blocos: Chamado pela rota /loja.

visit_user()
Descrição: Renderiza o perfil de visita do usuário se ele estiver logado; caso contrário, redireciona para a página
de login.
Retorno: Renderiza o template perfil_visita.html ou redireciona para login.
Interação com Outros Blocos: Chamado pela rota /user/visitante.

user()
Descrição: Renderiza o perfil do usuário se ele estiver logado; caso contrário, redireciona para a página de login.
Retorno: Renderiza o template perfil.html ou redireciona para login.
Interação com Outros Blocos: Chamado pela rota /user.

premium()
Descrição: Renderiza a página premium se o usuário estiver logado; caso contrário, redireciona para a página de login.
Retorno: Renderiza o template premium.html ou redireciona para login.
Interação com Outros Blocos: Chamado pela rota /premium.

vendas()
Descrição: Renderiza o formulário de vendas se o usuário estiver logado; caso contrário, redireciona para a página
de login.
Retorno: Renderiza o template vendas.html ou redireciona para login.
Interação com Outros Blocos: Chamado pela rota /formulario.

register()
Descrição: Manipula o registro de novos usuários. Insere um novo usuário no banco de dados se o formulário for
enviado.
Parâmetros: name, email, password, categoria.
Retorno: Redireciona para a página de login após o registro.
Interação com Outros Blocos: Utiliza insert_user para inserir dados no banco de dados e redireciona para a rota login.

login()
Descrição: Manipula o login do usuário. Verifica credenciais e cria uma nova sessão se o login for bem-sucedido.
Parâmetros: email_login, password_login.
Retorno: Redireciona para a página inicial após o login bem-sucedido.
Interação com Outros Blocos: Utiliza get_user_by_email para verificar as credenciais do usuário.

submit()
Descrição: Manipula o envio de respostas do formulário. Insere as respostas no banco de dados e inicia a criação
de um eBook em uma thread separada.
Parâmetros: Dados do formulário (respostas de question1 a question10).
Retorno: Redireciona para a página inicial após a submissão.
Interação com Outros Blocos: Utiliza insert_survey_response para inserir dados e generate_ebook para gerar o eBook
em segundo plano.

logout()
Descrição: Limpa a sessão do usuário e redireciona para a página inicial.
Retorno: Redireciona para a página inicial após o logout.
Interação com Outros Blocos: Limpa a sessão e exibe uma mensagem de sucesso.
Documentação Específica de Funções
Eventos e Manipuladores de Eventos: Não há eventos JavaScript diretamente manipulados neste arquivo. No entanto, a
lógica de backend lida com diferentes rotas e formulários.

Instruções de Configuração e Instalação
Dependências
Flask
SQLite3 (para gerenciamento de banco de dados)
threading (para criar e gerenciar threads)

Configurações Específicas
app.secret_key: Definido para sessões de usuário.

Guia de Uso Geral
Como Executar
Este arquivo é executado diretamente, iniciando o servidor Flask. O comando para iniciar a aplicação é:
"python app.py"

Testes
Como Testar
Testes Manuais: Verifique o funcionamento de cada rota e formulário, incluindo o login, registro e envio de
formulários.
Testes Automatizados: Pode-se usar frameworks de teste como pytest para criar testes unitários e de integração para
as funções e rotas.

Cobertura de Testes
A cobertura de testes deve incluir a verificação de todas as rotas e suas interações com o banco de dados.

Erros e Solução de Problemas
Erros Comuns
Erro ao inserir dados: Verifique os logs para mensagens de erro e certifique-se de que o banco de dados está
acessível.
Problemas com o eBook: Verifique os logs para erros relacionados à criação do eBook.

Debugging
Utilize as mensagens de log (impressões para erros e dados) para identificar e corrigir problemas. Também pode-se
utilizar ferramentas de depuração como o debugger do Flask.

Histórico de Alterações
Changelog Local
02/09/24 - Criei um novo arquivo para testes que funcionou o multithreading, mas ainda com problema de abertura
correta da aba.
02/09/24 - Modifiquei o arquivo e criei outro que funcionou a chamada correta das abas, mas não a fila.
02/09/24 - Fiz outro arquivo que consegui fazer funcionar a chamada da fila, mas não funcionou com o restante do
código.
03/09/24 - Arquivo gerenciando a abertura das abas, mesmo com clique simultâneo.
04/09/24 - Código trava o máximo de abas e chama a fila, mas crasha todos quando vai finalizar.
04/09/24 - Gerenciamento de fila funcionando!
05/09/24 - Abas abrindo em posição correta, respeitando o limite, mas fechando todas as abas, e não apenas uma.
05/09/24 - Abas OK, fila OK, posição OK, tamanho OK, erros não OK.
05/09/24 - Passei o código de app_testes para o código principal app e removi os arquivos secundários de testes.
06/09/24 - Arquivo com delay ao abrir as abas com o clique ao mesmo tempo, gerenciando fila, chamando ao acabar e
funcionando corretamente os elementos.
06/09/24 - Arquivo com delay entre abas, mas o navegador travado.
06/09/24 - Atualização do flash quando a fila está cheia.
06/09/24 - Arquivo funcionando! Removendo arquivos de backup.
10/09/24 - Inserção de bibliotecas novas e função para envio automático para cadas usuário usando smtp.

Contribuição
Estilo de Codificação
Convenções de Nomenclatura: Utilize nomes descritivos para funções e variáveis.
Estrutura: Mantenha a organização clara com funções de rotas seguidas por funções auxiliares.

Melhorias Futuras
Otimização do Processamento de Formulários: Considerar o uso de tarefas assíncronas para melhorar o desempenho
quando múltiplos usuários enviam formulários ao mesmo tempo.
Adição de Testes Automatizados: Garantir a cobertura de testes para todos os fluxos principais.